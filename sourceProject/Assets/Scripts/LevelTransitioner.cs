using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LevelTransitioner : MonoBehaviour {

    public string sceneNameToLoad;
    public int transitionerID;
    public float followerRadius;

    private float spawnDelay = 1;
    private float spawnTimer;
    private bool working = false;

	// Use this for initialization
	void Awake () {
        spawnTimer = spawnDelay;
	}
	
	// Update is called once per frame
	void Update () {
		if(spawnTimer >= 0)
        {
            spawnTimer -= Time.deltaTime;
        }
	}

    void OnTriggerEnter2D(Collider2D col)
    {
        if(spawnTimer <= 0 && !working)
        {
            PlayerController pc = col.transform.root.GetComponentInChildren<PlayerController>();
            if(pc != null) //player has collided
            {
                //make sure we don't overdo it
                working = true;

                //make all minions children to player so they are not destroyed
                Collider2D[] hitColliders = Physics2D.OverlapCircleAll(transform.position, followerRadius);
                List<GameObject> persistents = new List<GameObject>();
                foreach(Collider2D hit in hitColliders)
                {
                    //get root object
                    GameObject root = hit.transform.root.gameObject;

                    if (root.GetComponent<AIController>() != null && root != pc.transform.root) //ignore player
                    {
                        root.transform.parent = pc.transform.root;

                        //add to safe references for after load.
                        persistents.Add(root);
                    }
                }

                //also don't destroy us
                DontDestroyOnLoad(gameObject);

                //disable our autoid so we can no longer be tracked into loaded level.
                //GetComponent<AutoID>().enabled = false;

                //load level asynchronously, then clean up all in corutine
                StartCoroutine(LoadHelper(persistents));
            }
        }
    }

    IEnumerator LoadHelper(List<GameObject> persistents)
    {
        yield return UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(sceneNameToLoad);

        //get spawn position
        Vector3 spawnPos = Vector3.zero;
        LevelTransitioner[] transitioners = GameObject.FindObjectsOfType<LevelTransitioner>();
        foreach (LevelTransitioner lt in transitioners)
        {
            if(lt.transitionerID == transitionerID && lt.gameObject != gameObject) //right ID and not us
            {
                spawnPos = lt.transform.position;

                //set player spawn id
                GameObject.FindObjectOfType<PlayerController>().lastSpawnID = lt.GetComponent<AutoID>().id; //give found transitioner autogenerated id.

                break; // try to get out early.
            }
        }

        //move everything over(let physics fix position)
        foreach(GameObject go in persistents)
        {
            //unroot
            go.transform.parent = null;

            //move over
            Debug.Log("repositioning object: " + go.name + " current pos: " + go.transform.position + ", new pos: " + spawnPos);
            go.transform.position = spawnPos;
        }

        //done so sepuku
        GameObject.Destroy(gameObject);
    }
}
